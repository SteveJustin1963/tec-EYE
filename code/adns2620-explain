/* Arduino ADNS2620 Library
 * Can be used to interface between an ATmega328 (Arduino) and the ADNS2620 Mouse Sensor
 * Copyright 2010 SparkFun ElectronicS
 * Written by Ryan Owens
*/

#include <avr/pgmspace.h>
#include "adns2620.h"
#include "WProgram.h"

//Constructor sets the pins used for the mock 'i2c' communication

//Configures the communication pins for their initial state
The above code sets the pin modes for the SDA and SCL pins as OUTPUT.
void ADNS2620::begin()
{
	pinMode(_sda, OUTPUT);
	pinMode(_scl, OUTPUT);
}

//Essentially resets communication to the ADNS2620 module
void ADNS2620::sync()
{
	//  sets the SCL pin high, delays for 1 millisecond, sets the SCL pin low, 
	// delays for 1 millisecond, and then sets the SCL pin high again. 
	// delay 100ms

    digitalWrite(_scl, HIGH);
    delay(1);
	digitalWrite(_scl, LOW);
    delay(1);
	digitalWrite(_scl, HIGH);
    delay(100);
}

//Reads a register from the ADNS2620 sensor. Returns the result to the calling function.
//Example: value = mouse.read(CONFIGURATION_REG);

char ADNS2620::read(char address)
{
	// sets the pin mode for the SDA line to output and the clock line to input. 
	// It also sets the clock line high. The address is then ANDed with 0x7F to ensure the highest bit is set to '0' to indicate a read.
	
	char value=0;
	pinMode(_sda, OUTPUT); //Make sure the SDIO pin is set as an output.
    digitalWrite(_scl, HIGH); //Make sure the clock is high.
    address &= 0x7F;    //Make sure the highest bit of the address byte is '0' to indicate a read.
 
    //Send the Address to the ADNS2620
    	// sets the clock line to low and then sets the data line to output. 
	// This is done to prepare for sending data.
    
    for(int address_bit=7; address_bit >=0; address_bit--){
        digitalWrite(_scl, LOW);  //Lower the clock
        pinMode(_sda, OUTPUT); //Make sure the SDIO pin is set as an output.
        
        // If the current bit is a 1, set the SDIO pin. If not, clear the SDIO pin
        // sets the SDA line to the value of the bit being sent (either HIGH or LOW), then pulses the SCL line to send the bit.
	
	if(address & (1<<address_bit)){
            digitalWrite(_sda, HIGH);
        }
        else{
            digitalWrite(_sda, LOW);
        }
        delayMicroseconds(10);
        digitalWrite(_scl, HIGH);
        delayMicroseconds(10);
    }
    
    delayMicroseconds(120);   //Allow extra time for ADNS2620 to transition the SDIO pin (per datasheet)
    //Make SDIO an input on the microcontroller
    pinMode(_sda, INPUT);	//Make sure the SDIO pin is set as an input.
	digitalWrite(_sda, HIGH); //Enable the internal pull-up
        
    // Send the Value byte to the ADNS2620
    	// The delayMicroseconds function takes an integer value of microseconds to delay the program by. 
    	// used to create a pause between setting and reading the SDIO pin.
	// The digitalWrite function takes an integer pin number and a HIGH or LOW value. 
	// When called, it sets the pin to either 3.3V (HIGH) or 0V (LOW).
	// The digitalRead function takes an integer pin number and returns either a HIGH or LOW value. 
	// When called, it reads the voltage level of the specified pin.
    
    for(int value_bit=7; value_bit >= 0; value_bit--){
        digitalWrite(_scl, LOW);  //Lower the clock
        delayMicroseconds(10); //Allow the ADNS2620 to configure the SDIO pin
        digitalWrite(_scl, HIGH);  //Raise the clock
        delayMicroseconds(10);
        //If the SDIO pin is high, set the current bit in the 'value' variable. If low, leave the value bit default (0).    
		//if((ADNS_PIN & (1<<ADNS_sda)) == (1<<ADNS_sda))value|=(1<<value_bit);
		if(digitalRead(_sda))value |= (1<<value_bit);

    }
    
    return value;
}	

// Writes a value to a register on the ADNS2620.
// Example: mouse.write(CONFIGURATION_REG, 0x01);

void ADNS2620::write(char address, char value)
{
	pinMode(_sda, OUTPUT);	//Make sure the SDIO pin is set as an output.
    digitalWrite(_scl, HIGH);          //Make sure the clock is high.
    address |= 0x80;    //Make sure the highest bit of the address byte is '1' to indicate a write.

    // Send the Address to the ADNS2620
    for(int address_bit=7; address_bit >=0; address_bit--){
        digitalWrite(_scl, LOW); //Lower the clock
        
        delayMicroseconds(10); //Give a small delay (only needed for the first iteration to ensure that the ADNS2620 relinquishes
                    //control of SDIO if we are performing this write after a 'read' command.
        
        // If the current bit is a 1, set the SDIO pin. If not, clear the SDIO pin
	// sets the value of the SDA pin according to the value of the "address" variable. 
	// If the "address" variable is 1, the SDA pin is set to HIGH. If the "address" variable is 0, the SDA pin is set to LOW.
	// The code then delays for 10 microseconds, and sets the SCL pin to HIGH. 
	// This causes the data on the SDA pin to be clocked into the slave device.
	// Finally, the code delays for another 10 microseconds, before setting the SCL pin back to LOW. 
	// This ensures that the data is properly latched on the slave device.
        
	if(address & (1<<address_bit))digitalWrite(_sda, HIGH);
        else digitalWrite(_sda, LOW);
        delayMicroseconds(10);
        digitalWrite(_scl, HIGH);
        delayMicroseconds(10);
    }
    
    //Send the Value byte to the ADNS2620
    // sets the clock low, then writes the value to the data line. 
    //It then sets the clock high and delays for a short time.
    
    for(int value_bit=7; value_bit >= 0; value_bit--){
        digitalWrite(_scl, LOW);  //Lower the clock
        //If the current bit is a 1, set the SDIO pin. If not, clear the SDIO pin
        if(value & (1<<value_bit))digitalWrite(_sda, HIGH);
        else digitalWrite(_sda, LOW);
        delayMicroseconds(10);
        digitalWrite(_scl, HIGH);
        delayMicroseconds(10);
    }
}

